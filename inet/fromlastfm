#!/usr/bin/bash

case $1 in
  '--help'|'-h')
    echo "Usage:       fromlastfm DATA [OPTIONS]"
    echo "Description: Fetch from a list of links generated by lastfm's \
scrobbler given DATA"
    echo "Options:
  -c: continously play
  -a: DATA is an artist
  -g: DATA is a genre
  -p: DATA is a playlist
  -um: DATA is an USER, and fetch their mix
  -ul: DATA is an USER, and fetch their library
  -ur: DATA is an USER, and fetch their recommended (default)"
    exit 0 ;;
  *)
    DATA=$1 ;;
esac

if [[ -z $DATA ]]; then
  echo "[ !! ] Missing DATA. See \`--help'"
  exit 1
fi

continous=false
from=user
from_user=recommended

for arg in ${@:2}; do
  case $arg in
    '-c') continous=true ; trap 'exit 0' 'INT' ;;
    '-a') from=artist ;;
    '-g') from=genre ;;
    '-p') from=playlist ;;
    '-um') from=user; from_user=mix ;;
    '-ul') from=user; from_user=library ;;
    '-ur') from=user; from_user=recommended ;;
  esac
done

function urlencode {
  echo "$@" | tr ' ' '+'
}

case $from in
  'artist') url=$(urlencode \
                  "https://www.last.fm/player/station/music/${DATA}");;
  'genre') url=$(urlencode \
                 "https://www.last.fm/player/station/tag/${DATA}");;
  'playlist') url=$(urlencode \
                    "https://www.last.fm/player/station/${DATA}");;
  'user') url=$(urlencode \
                "https://www.last.fm/player/station/user/${DATA}/${from_user}");;
esac

function mpc_hold {
  local played=false
  local current=$1

  while :; do
    mpc idle player >& /dev/null

    _current=$(mpc current)

    if [[ $_current == $current ]]; then
      # pause? seeked?
      case $(mpc status '%state%') in
        'playing')
          # seeked. do nothing
          continue ;;
        'paused')
          # paused? stopped?
          if [[ $(mpc status '%currenttime') == '0:00' ]]; then
            # stopped. return
            return 0
          else
            # paused. hold
            continue
          fi ;;
      esac
    else
      return 0
    fi
  done
}

mpc clear

function main {
  curl -s "${url}" |\
    jq -r ".playlist[] | objects | \
  .name, \
  .artists[0].name, \
  .playlinks[0].id" |\
    awk '
  BEGIN {l=0;s=""}
  {l++; s=$0 "	" s; if (l == 3) {l = 0; printf "%s\n", s; s=""}}' \
        > /tmp/lastfm-manifest

  if [[ $? != 0 || $(stat -c '%s' /tmp/lastfm-manifest) == 0 ]]; then
    return 1
  fi

  export IFS='	'
  mu=()

  while read id artist title; do
    mu+=("${id}	${artist}	${title}")
  done < /tmp/lastfm-manifest

  for line in "${mu[@]}"; do
    id=$(echo "$line" | cut -d'	' -f1)
    artist=$(echo "$line" | cut -d'	' -f2)
    title=$(echo "$line" |cut -d'	' -f3)

    echo "----------------------------------------
[ .. ] Given title: $title, artist: $artist, id: $id"

    if ! $continous; then
      printf "[ ?? ] Play? [Y/n] "
      read ans
    else
      ans='y'
    fi

    if [[ -z $ans || $ans == 'y' ]]; then
      # We assume we're only playing the recommendations
      mpc del 1

      echo "[ .. ] Downloading to /tmp/mu.mp4"
      yt-dlp --format '140' --postprocessor-args \
             "ffmpeg:-metadata title=${title@Q} -metadata artist=${artist@Q}" \
             --force-overwrites -o /tmp/mu.mp4 "$id"
      current="${artist} - ${title}"

      # don't load the same song twice: if it failed to download, just continue
      if [[ $? != 0 ]]; then
        continue
      fi

      mpc add /tmp/mu.mp4
      mpc play

      if $continous; then
        mpc_hold $current

        if [[ $? == 1 ]]; then
          break
        fi
      fi
    fi
  done
}

while :; do
  main
  main_ret=$?

  if [[ $main_ret != 0 ]]; then
    echo "[ !! ] Error while fetching"
    exit $main_ret
  fi

  if ! $continous; then
    printf "[ ?? ] Fetch another? [y/N] "
    read ans

    if [[ -z $ans || $ans == 'n' ]]; then
      break
    else
      continue
    fi
  else
    echo "[ .. ] Fetching another batch"
  fi
done
