#!/usr/bin/bash

# -t: use tmux

SUDO=doas

AS=${0##*/}
COMMAND=${AS/-lock/}
CONFIRM=@SHUTDOWN_LOCK_CONFIRM@
USER_SHELL=/bin/zsh

# clear them first
unset LOGINCMD

### Prompt docs

echo "[ .. ] Prompting user for checkout on the journal"
sleep 1

docs $1 journal

### Wallpaper (only after `wpnew', which uses `wpset')
if [[ -s /tmp/.wp ]]; then
  wpset -k -r -l
fi

### Set locks

function lock_man {
  read -p "[ ?? ] Update ManDB? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
    echo "Ignore lock:" "lock was ignored for man"
    return 0
  fi

  while ! $SUDO mandb; do continue; done
}

function lock_pacman {
  local MANUAL=''

  read -p "[ ?? ] Update packages (pacman)? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
    echo "Ignore lock:" "lock was ignored for pacman"
    return 0
  fi

  read -p "[ ?? ] Manual review? [y/N] " ans

  if [[ ! -z $ans && $ans != 'n' ]]; then
    MANUAL=y
  else
    MANUAL=n
  fi

  if [[ $MANUAL = 'y' ]]; then
    echo "[ .. ] Updating pacman database for manual review"
    while ! $SUDO pacman -Sy; do continue; done
    echo "[ .. ] Generating new pacman updatable package file"
    pacman -Qu > /tmp/pacman/pacman-update-raw
    sed -E 's/\x1b\[0;1m|\x1b\[0;32m//g' /tmp/pacman/pacman-update-raw |\
      awk '{print $1}' > /tmp/pacman/pacman-update
    echo "[ .. ] Setting permissions"
    chown -Rv @SHUTDOWN_LOCK_USER@ /tmp/pacman/pacman-update \
          /tmp/pacman/pacman-update-raw
    chmod -Rv a+w /tmp/pacman/pacman-update /tmp/pacman/pacman-update-raw
    echo "[ .. ] Listing updatable packages"
    less -R /tmp/pacman/pacman-update-raw
  fi

  read -p "[ ?? ] Check against wiki? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
  else
    if [[ $MANUAL = 'y' ]]; then
      @SHUTDOWN_LOCK_FIND_WIKI_PACMAN_INDEX@ \
        /tmp/pacman/pacman-update | less
    else
      @SHUTDOWN_LOCK_FIND_WIKI_PACMAN_INDEX@ /tmp/pacman/pacman |\
        less
    fi
  fi

  read -p "[ ?? ] Handle SSD packages (pacman)? [Y/n] " ans
  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
  else # open a new shell, wait for it to die, then continue
    echo "[ OK ] Waiting for SSD packages to be handled"
    $USER_SHELL
  fi

  echo "[ .. ] Updating system (pacman)"
  $SUDO pacman -Su

  echo "[ .. ] Removing lock"
  rm -v /tmp/pacman/lock-pacman
}

function lock_paru {
  local MANUAL=''

  read -p "[ ?? ] Update packages (AUR)? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
    echo "Ignore lock:" "lock was ignored for paru"
    return 0
  fi

  read -p "[ ?? ] Manual review? [y/N] " ans

  if [[ ! -z $ans && $ans != 'n' ]]; then
    MANUAL=y
  else
    MANUAL=n
  fi

  if [[ $MANUAL = 'y' ]]; then
    echo "[ .. ] Updating database for manual review"
    paru -Sy
    echo "[ .. ] Generating new pacman updatable package file"
    paru -Qu > /tmp/pacman/paru-update-raw
    sed -E 's/\x1b\[0;1m|\x1b\[0;32m//g' /tmp/pacman/paru-update-raw |\
      awk '{print $1}' > /tmp/pacman/paru-update
    echo "[ .. ] Setting permissions"
    chown -Rv @SHUTDOWN_LOCK_USER@ /tmp/pacman/paru-update \
          /tmp/pacman/paru-update-raw
    chmod -Rv a+w /tmp/pacman/paru-update /tmp/pacman/paru-update-raw
    echo "[ .. ] Listing updatable packages"
    less -R /tmp/pacman/paru-update-raw
  fi

  read -p "[ ?? ] Check against wiki? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
  else
    if [[ $MANUAL = 'y' ]]; then
      @SHUTDOWN_LOCK_FIND_WIKI_PACMAN_INDEX@ /tmp/pacman/paru-update |\
        less
    else
      @SHUTDOWN_LOCK_FIND_WIKI_PACMAN_INDEX@ /tmp/pacman/paru |\
        less
    fi
  fi

  read -p "[ ?? ] Handle SSD packages? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
  else # open a new shell, wait for it to die, then continue
    echo "[ OK ] Waiting for SSD packages to be handled"
    $USER_SHELL
  fi

  echo "[ .. ] Updating system (AUR)"
  paru -Su

  echo "[ .. ] Removing lock"
  rm -v /tmp/pacman/lock-paru
}

function lock_efistub {
  read -p "[ ?? ] Update packages (efistub)? [Y/n] " ans

  if [[ ! -z $ans && $ans != 'y' ]]; then
    echo "[ !! ] Ignoring ... "
    echo "Ignore lock:" "lock was ignored for efistub"
    return 0
  fi

  while ! $SUDO @SHUTDOWN_LOCK_UPDATE_EFISTUB@; do continue; done
}

if [[ -d /tmp/pacman ]]; then
  if [[ -f /tmp/pacman/pacman-lock ]]; then
    echo "[ .. ] Package lock found"

    lock_pacman
    lock_man
  fi

  if [[ -f /tmp/pacman/paru-lock ]]; then
    echo "[ .. ] Package lock found (AUR)"

    lock_paru
  fi

  if [[ -f /tmp/pacman/efistub-lock ]]; then
    echo "[ .. ] Efistub lock found"

    lock_efistub
  fi
fi

exec $CONFIRM
